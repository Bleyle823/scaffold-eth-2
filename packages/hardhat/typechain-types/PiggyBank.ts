/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PiggyBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFunds"
      | "createPiggyBank"
      | "emergencyWithdraw"
      | "getCurrentTime"
      | "getLockDuration"
      | "getPiggyBank"
      | "getTimeLeft"
      | "piggyBanks"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deposit" | "PiggyBankSmashed" | "Withdrawal"
  ): EventFragment;

  encodeFunctionData(functionFragment: "addFunds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPiggyBank",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockDuration",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPiggyBank",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeLeft",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "piggyBanks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPiggyBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPiggyBank",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeLeft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "piggyBanks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    unlockTime: BigNumberish
  ];
  export type OutputTuple = [user: string, amount: bigint, unlockTime: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
    unlockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PiggyBankSmashedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PiggyBank extends BaseContract {
  connect(runner?: ContractRunner | null): PiggyBank;
  waitForDeployment(): Promise<this>;

  interface: PiggyBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFunds: TypedContractMethod<[], [void], "payable">;

  createPiggyBank: TypedContractMethod<
    [_lockDurationInSeconds: BigNumberish],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  getCurrentTime: TypedContractMethod<[], [bigint], "view">;

  getLockDuration: TypedContractMethod<[duration: string], [bigint], "view">;

  getPiggyBank: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, boolean, boolean] & {
        amount: bigint;
        unlockTime: bigint;
        isUnlocked: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;

  getTimeLeft: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  piggyBanks: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        amount: bigint;
        unlockTime: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFunds"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "createPiggyBank"
  ): TypedContractMethod<
    [_lockDurationInSeconds: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLockDuration"
  ): TypedContractMethod<[duration: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPiggyBank"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, boolean, boolean] & {
        amount: bigint;
        unlockTime: bigint;
        isUnlocked: boolean;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeLeft"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "piggyBanks"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, boolean] & {
        amount: bigint;
        unlockTime: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "PiggyBankSmashed"
  ): TypedContractEvent<
    PiggyBankSmashedEvent.InputTuple,
    PiggyBankSmashedEvent.OutputTuple,
    PiggyBankSmashedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "PiggyBankSmashed(address,uint256)": TypedContractEvent<
      PiggyBankSmashedEvent.InputTuple,
      PiggyBankSmashedEvent.OutputTuple,
      PiggyBankSmashedEvent.OutputObject
    >;
    PiggyBankSmashed: TypedContractEvent<
      PiggyBankSmashedEvent.InputTuple,
      PiggyBankSmashedEvent.OutputTuple,
      PiggyBankSmashedEvent.OutputObject
    >;

    "Withdrawal(address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
  };
}
