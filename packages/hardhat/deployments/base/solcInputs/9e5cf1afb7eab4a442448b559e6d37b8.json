{
  "language": "Solidity",
  "sources": {
    "contracts/PiggyBank.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title PiggyBank\r\n * @dev A time-locked savings contract where users can deposit ETH and withdraw only after lock period\r\n */\r\ncontract PiggyBank {\r\n    struct Savings {\r\n        uint256 amount;\r\n        uint256 unlockTime;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(address => Savings) public piggyBanks;\r\n    \r\n    event Deposit(address indexed user, uint256 amount, uint256 unlockTime);\r\n    event Withdrawal(address indexed user, uint256 amount);\r\n    event PiggyBankSmashed(address indexed user, uint256 amount);\r\n\r\n    error NoSavings();\r\n    error StillLocked(uint256 timeRemaining);\r\n    error NoDeposit();\r\n    error TransferFailed();\r\n\r\n    /**\r\n     * @dev Create a piggy bank with a lock duration in seconds\r\n     * @param _lockDurationInSeconds Duration to lock the funds (e.g., 86400 for 1 day)\r\n     */\r\n    function createPiggyBank(uint256 _lockDurationInSeconds) external payable {\r\n        require(msg.value > 0, \"Must deposit some ETH\");\r\n        require(_lockDurationInSeconds > 0, \"Lock duration must be positive\");\r\n\r\n        uint256 unlockTime = block.timestamp + _lockDurationInSeconds;\r\n        \r\n        if (piggyBanks[msg.sender].exists) {\r\n            // Add to existing piggy bank and extend lock time if new time is longer\r\n            piggyBanks[msg.sender].amount += msg.value;\r\n            if (unlockTime > piggyBanks[msg.sender].unlockTime) {\r\n                piggyBanks[msg.sender].unlockTime = unlockTime;\r\n            }\r\n        } else {\r\n            // Create new piggy bank\r\n            piggyBanks[msg.sender] = Savings({\r\n                amount: msg.value,\r\n                unlockTime: unlockTime,\r\n                exists: true\r\n            });\r\n        }\r\n\r\n        emit Deposit(msg.sender, msg.value, piggyBanks[msg.sender].unlockTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Add more funds to existing piggy bank\r\n     */\r\n    function addFunds() external payable {\r\n        if (!piggyBanks[msg.sender].exists) revert NoSavings();\r\n        require(msg.value > 0, \"Must deposit some ETH\");\r\n\r\n        piggyBanks[msg.sender].amount += msg.value;\r\n        \r\n        emit Deposit(msg.sender, msg.value, piggyBanks[msg.sender].unlockTime);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw funds after lock period expires\r\n     */\r\n    function withdraw() external {\r\n        Savings storage savings = piggyBanks[msg.sender];\r\n        \r\n        if (!savings.exists) revert NoSavings();\r\n        if (block.timestamp < savings.unlockTime) {\r\n            revert StillLocked(savings.unlockTime - block.timestamp);\r\n        }\r\n\r\n        uint256 amount = savings.amount;\r\n        \r\n        // Clear the piggy bank before transfer (CEI pattern)\r\n        delete piggyBanks[msg.sender];\r\n\r\n        // Transfer the funds\r\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\r\n        if (!success) revert TransferFailed();\r\n\r\n        emit Withdrawal(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency withdrawal with penalty (loses 10% of funds)\r\n     * Use this only in real emergencies!\r\n     */\r\n    function emergencyWithdraw() external {\r\n        Savings storage savings = piggyBanks[msg.sender];\r\n        \r\n        if (!savings.exists) revert NoSavings();\r\n\r\n        uint256 penalty = savings.amount / 10; // 10% penalty\r\n        uint256 withdrawAmount = savings.amount - penalty;\r\n        uint256 totalAmount = savings.amount;\r\n\r\n        // Clear the piggy bank before transfer\r\n        delete piggyBanks[msg.sender];\r\n\r\n        // Transfer funds minus penalty\r\n        (bool success, ) = payable(msg.sender).call{value: withdrawAmount}(\"\");\r\n        if (!success) revert TransferFailed();\r\n\r\n        emit PiggyBankSmashed(msg.sender, totalAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Check how much time is left until withdrawal\r\n     * @return timeLeft seconds remaining, 0 if unlocked\r\n     */\r\n    function getTimeLeft(address user) external view returns (uint256 timeLeft) {\r\n        if (!piggyBanks[user].exists) return 0;\r\n        \r\n        uint256 unlockTime = piggyBanks[user].unlockTime;\r\n        if (block.timestamp >= unlockTime) {\r\n            return 0;\r\n        }\r\n        return unlockTime - block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Get piggy bank details for a user\r\n     */\r\n    function getPiggyBank(address user) external view returns (\r\n        uint256 amount,\r\n        uint256 unlockTime,\r\n        bool isUnlocked,\r\n        bool exists\r\n    ) {\r\n        Savings memory savings = piggyBanks[user];\r\n        return (\r\n            savings.amount,\r\n            savings.unlockTime,\r\n            block.timestamp >= savings.unlockTime,\r\n            savings.exists\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get current block timestamp (useful for frontend)\r\n     */\r\n    function getCurrentTime() external view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function to calculate lock time for common durations\r\n     */\r\n    function getLockDuration(string memory duration) external pure returns (uint256) {\r\n        bytes32 durationHash = keccak256(abi.encodePacked(duration));\r\n        \r\n        if (durationHash == keccak256(abi.encodePacked(\"1hour\"))) return 3600;\r\n        if (durationHash == keccak256(abi.encodePacked(\"1day\"))) return 86400;\r\n        if (durationHash == keccak256(abi.encodePacked(\"1week\"))) return 604800;\r\n        if (durationHash == keccak256(abi.encodePacked(\"1month\"))) return 2592000; // 30 days\r\n        if (durationHash == keccak256(abi.encodePacked(\"1year\"))) return 31536000; // 365 days\r\n        \r\n        return 0; // Invalid duration\r\n    }\r\n\r\n    // Prevent accidental ETH sends to contract\r\n    receive() external payable {\r\n        revert(\"Use createPiggyBank() function to deposit\");\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}